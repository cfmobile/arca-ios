<?xml version="1.0" encoding="UTF-8"?>
<Tokens version="1.0">
	<File path="Classes/ArcaManagedObject.html">
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/cl/ArcaManagedObject</TokenIdentifier>
			<Abstract type="html">A subclass of NSManagedObject that adds several convenience methods and properties for easily populating data from an NSCollection to CoreData objects.</Abstract>
			<DeclaredIn>ArcaManagedObject.h</DeclaredIn>
            
			
			<NodeRef refid="2"/>
		</Token>
		
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/ArcaManagedObject/objectForEntityNamed:inContext:</TokenIdentifier>
			<Abstract type="html">Creates and returns an object for the given entity name, in the given context</Abstract>
			<DeclaredIn>ArcaManagedObject.h</DeclaredIn>
			
			<Declaration>+ (instancetype)objectForEntityNamed:(NSString *)entityName inContext:(NSManagedObjectContext *)context</Declaration>
			<Parameters>
				<Parameter>
					<Name>entityName</Name>
					<Abstract type="html">The name of the entity in your data model (i.e. Person)</Abstract>
				</Parameter><Parameter>
					<Name>context</Name>
					<Abstract type="html">The context you want the object to be created in</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">A new object of whatever class that entity is assigned to</Abstract></ReturnValue>
			<Anchor>//api/name/objectForEntityNamed:inContext:</Anchor>
            <NodeRef refid="2"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/ArcaManagedObject/sourcePrimaryKeyPath</TokenIdentifier>
			<Abstract type="html">The keypath in source data (i.e. JSON from a server request) which correspond to this object&apos;s primary key</Abstract>
			<DeclaredIn>ArcaManagedObject.h</DeclaredIn>
			
			<Declaration>+ (NSString *)sourcePrimaryKeyPath</Declaration>
			
			<ReturnValue><Abstract type="html">A keyPath that this framework will recognize as a primary key provided by a source</Abstract></ReturnValue>
			<Anchor>//api/name/sourcePrimaryKeyPath</Anchor>
            <NodeRef refid="2"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/ArcaManagedObject/objectToSourceKeyMap</TokenIdentifier>
			<Abstract type="html">A collection which maps object keypaths to the keypaths that will be provided by the source.</Abstract>
			<DeclaredIn>ArcaManagedObject.h</DeclaredIn>
			
			<Declaration>+ (NSDictionary *)objectToSourceKeyMap</Declaration>
			
			<ReturnValue><Abstract type="html">An NSDictionary that represents the key mappings between source and object</Abstract></ReturnValue>
			<Anchor>//api/name/objectToSourceKeyMap</Anchor>
            <NodeRef refid="2"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/ArcaManagedObject/primaryKeyAttribute</TokenIdentifier>
			<Abstract type="html">The NSAttributeDescription that corresponds to the property identified by the keyPath from primaryKeyPath</Abstract>
			<DeclaredIn>ArcaManagedObject.h</DeclaredIn>
			
			<Declaration>+ (NSAttributeDescription *)primaryKeyAttribute</Declaration>
			
			<ReturnValue><Abstract type="html">An NSAttributeDescription for the primaryKey</Abstract></ReturnValue>
			<Anchor>//api/name/primaryKeyAttribute</Anchor>
            <NodeRef refid="2"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/ArcaManagedObject/objectsMatchingPredicate:sortDescriptors:faultingData:inContext:error:</TokenIdentifier>
			<Abstract type="html">Retrieves all of the objects matching the provided parameters using the given context</Abstract>
			<DeclaredIn>ArcaManagedObject.h</DeclaredIn>
			
			<Declaration>+ (NSArray *)objectsMatchingPredicate:(NSPredicate *)predicate sortDescriptors:(NSArray *)sortDescriptors faultingData:(BOOL)faultingData inContext:(NSManagedObjectContext *)managedObjectContext error:(NSError **)error</Declaration>
			<Parameters>
				<Parameter>
					<Name>predicate</Name>
					<Abstract type="html">The NSPredicate that describes what data to retrieve</Abstract>
				</Parameter><Parameter>
					<Name>sortDescriptors</Name>
					<Abstract type="html">The sorting information to use on the retrieved data</Abstract>
				</Parameter><Parameter>
					<Name>faultingData</Name>
					<Abstract type="html">Whether the request should pre-fault the data, set to YES only if you intend to make use of all or most of the data in the request</Abstract>
				</Parameter><Parameter>
					<Name>managedObjectContext</Name>
					<Abstract type="html">The context to use for the fetch</Abstract>
				</Parameter><Parameter>
					<Name>error</Name>
					<Abstract type="html">If an error occurs, it will be populated into this variable</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">An array containing the retrieved objects</Abstract></ReturnValue>
			<Anchor>//api/name/objectsMatchingPredicate:sortDescriptors:faultingData:inContext:error:</Anchor>
            <NodeRef refid="2"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/ArcaManagedObject/objectsMatchingPrimaryKeys:faultingData:inContext:error:</TokenIdentifier>
			<Abstract type="html">A wrapper for the objectsMatchingPredicate selector that fetches objects matching the primary keys provided</Abstract>
			<DeclaredIn>ArcaManagedObject.h</DeclaredIn>
			
			<Declaration>+ (NSArray *)objectsMatchingPrimaryKeys:(NSArray *)primaryKeys faultingData:(BOOL)faultingData inContext:(NSManagedObjectContext *)context error:(NSError **)error</Declaration>
			<Parameters>
				<Parameter>
					<Name>primaryKeys</Name>
					<Abstract type="html">An array of primary key values on which to match</Abstract>
				</Parameter><Parameter>
					<Name>faultingData</Name>
					<Abstract type="html">Whether the request should pre-fault the data, set to YES only if you intend to make use of all or most of the data in the request</Abstract>
				</Parameter><Parameter>
					<Name>context</Name>
					<Abstract type="html">The context to use for the fetch</Abstract>
				</Parameter><Parameter>
					<Name>error</Name>
					<Abstract type="html">If an error occurs, it will be populated into this variable</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">An array containing the retrieved objects</Abstract></ReturnValue>
			<Anchor>//api/name/objectsMatchingPrimaryKeys:faultingData:inContext:error:</Anchor>
            <NodeRef refid="2"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/ArcaManagedObject/fetchRequestForObjectsMatchingPredicate:sortDescriptors:faultingData:inContext:error:</TokenIdentifier>
			<Abstract type="html">Used (internally) to create a fetch request for retrieving objects with the given options</Abstract>
			<DeclaredIn>ArcaManagedObject.h</DeclaredIn>
			
			<Declaration>+ (NSFetchRequest *)fetchRequestForObjectsMatchingPredicate:(NSPredicate *)predicate sortDescriptors:(NSArray *)sortDescriptors faultingData:(BOOL)faultingData inContext:(NSManagedObjectContext *)managedObjectContext error:(NSError **)error</Declaration>
			<Parameters>
				<Parameter>
					<Name>predicate</Name>
					<Abstract type="html">The predicate to provide the fetch request</Abstract>
				</Parameter><Parameter>
					<Name>sortDescriptors</Name>
					<Abstract type="html">The array of sort descriptors to provide to the fetch request.</Abstract>
				</Parameter><Parameter>
					<Name>faultingData</Name>
					<Abstract type="html">Whether the request should pre-fault the data, set to YES only if you intend to make use of all or most of the data in the request</Abstract>
				</Parameter><Parameter>
					<Name>managedObjectContext</Name>
					<Abstract type="html">The context to use for the fetch</Abstract>
				</Parameter><Parameter>
					<Name>error</Name>
					<Abstract type="html">If an error occurs, it will be populated into this variable</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">An array containing the retrieved objects</Abstract></ReturnValue>
			<Anchor>//api/name/fetchRequestForObjectsMatchingPredicate:sortDescriptors:faultingData:inContext:error:</Anchor>
            <NodeRef refid="2"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/ArcaManagedObject/deleteAllObjects:</TokenIdentifier>
			<Abstract type="html">A convenience method for deleting all objects of a given class from the persistent store</Abstract>
			<DeclaredIn>ArcaManagedObject.h</DeclaredIn>
			
			<Declaration>+ (BOOL)deleteAllObjects:(NSError **)error</Declaration>
			<Parameters>
				<Parameter>
					<Name>error</Name>
					<Abstract type="html">Any errors that occur will be populated to this address</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">A boolean indicating success or failure</Abstract></ReturnValue>
			<Anchor>//api/name/deleteAllObjects:</Anchor>
            <NodeRef refid="2"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/ArcaManagedObject/clearObjectDataForReplacement</TokenIdentifier>
			<Abstract type="html">Used when an object is to be replaced completely by new data (as opposed to incrementally updated)</Abstract>
			<DeclaredIn>ArcaManagedObject.h</DeclaredIn>
			
			<Declaration>- (void)clearObjectDataForReplacement</Declaration>
			
			
			<Anchor>//api/name/clearObjectDataForReplacement</Anchor>
            <NodeRef refid="2"/>
		</Token>
		
        
	</File>
</Tokens>